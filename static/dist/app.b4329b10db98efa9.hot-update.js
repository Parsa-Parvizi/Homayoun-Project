"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(typeof self !== 'undefined' ? self : this)["webpackHotUpdatefrontend"]("app",{

/***/ "./node_modules/babel-loader/lib/index.js??clonedRuleSet-40.use[0]!./node_modules/vue-loader/dist/index.js??ruleSet[0].use[0]!./src/components/addTruck.vue?vue&type=script&lang=js":
/*!******************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/babel-loader/lib/index.js??clonedRuleSet-40.use[0]!./node_modules/vue-loader/dist/index.js??ruleSet[0].use[0]!./src/components/addTruck.vue?vue&type=script&lang=js ***!
  \******************************************************************************************************************************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var flowbite__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! flowbite */ \"./node_modules/flowbite/lib/esm/index.js\");\n\nfunction isPakPlate(plate) {\n  // Define the regex pattern for a Pak license plate\n  // The pattern checks for:\n  // - A two-digit number at the beginning\n  // - A Farsi letter\n  // - A three-digit number\n  // - A two-digit number at the end\n  // Note: This pattern assumes a broad range of Farsi letters for simplicity.\n  const pattern = /^\\d{2}[\\u0600-\\u06FF]\\d{3}\\d{2}$/;\n\n  // Check if the plate matches the pattern\n  if (pattern.test(plate)) {\n    return true;\n  } else {\n    return false;\n  }\n}\n\n// Example usage\nconst plate = \"12ا3456\";\nif (isPakPlate(plate)) {\n  console.log(\"This plate is a Pak.\");\n} else {\n  console.log(\"This plate is not a Pak.\");\n}\n/* harmony default export */ __webpack_exports__[\"default\"] = ({\n  name: \"addTruck\",\n  mounted() {\n    (0,flowbite__WEBPACK_IMPORTED_MODULE_0__.initFlowbite)();\n  },\n  data() {\n    return {\n      license_code1: 12,\n      license_code2: 'ب',\n      license_code1: 365,\n      license_code1: 11\n    };\n  }\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/babel-loader/lib/index.js??clonedRuleSet-40.use[0]!./node_modules/vue-loader/dist/index.js??ruleSet[0].use[0]!./src/components/addTruck.vue?vue&type=script&lang=js\n");

/***/ })

},
/******/ function(__webpack_require__) { // webpackRuntimeModules
/******/ /* webpack/runtime/getFullHash */
/******/ !function() {
/******/ 	__webpack_require__.h = function() { return "fa8bec3ef69d6bd4"; }
/******/ }();
/******/ 
/******/ }
);