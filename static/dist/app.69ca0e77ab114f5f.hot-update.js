"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(typeof self !== 'undefined' ? self : this)["webpackHotUpdatefrontend"]("app",{

/***/ "./node_modules/babel-loader/lib/index.js??clonedRuleSet-40.use[0]!./node_modules/vue-loader/dist/index.js??ruleSet[0].use[0]!./src/components/addNewReel.vue?vue&type=script&lang=js":
/*!********************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/babel-loader/lib/index.js??clonedRuleSet-40.use[0]!./node_modules/vue-loader/dist/index.js??ruleSet[0].use[0]!./src/components/addNewReel.vue?vue&type=script&lang=js ***!
  \********************************************************************************************************************************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var flowbite__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! flowbite */ \"./node_modules/flowbite/lib/esm/index.js\");\n/* harmony import */ var _Card__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Card */ \"./src/components/Card.vue\");\n/* harmony import */ var _components_Alert_vue__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @/components/Alert.vue */ \"./src/components/Alert.vue\");\n/* harmony import */ var _components_Modal_vue__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @/components/Modal.vue */ \"./src/components/Modal.vue\");\nObject(function webpackMissingModule() { var e = new Error(\"Cannot find module '@/components/QRCodeComponent.vue'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }());\n/* harmony import */ var qrcode__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! qrcode */ \"./node_modules/qrcode/lib/browser.js\");\n\n\n\n\n\n\n/* harmony default export */ __webpack_exports__[\"default\"] = ({\n  name: \"addNewReel\",\n  components: {\n    modal: _components_Modal_vue__WEBPACK_IMPORTED_MODULE_3__[\"default\"],\n    Alert: _components_Alert_vue__WEBPACK_IMPORTED_MODULE_2__[\"default\"],\n    Card: _Card__WEBPACK_IMPORTED_MODULE_1__[\"default\"],\n    QRCodeComponent: Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '@/components/QRCodeComponent.vue'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }())\n  },\n  mounted() {\n    (0,flowbite__WEBPACK_IMPORTED_MODULE_0__.initFlowbite)();\n    this.axios.get('/myapp/api/getConsumptionProfileNames').then(response => {\n      console.log(response.data);\n      if (response.data['status'] == 'success') {\n        this.consumption_profile_names = response.data['material_names'];\n      }\n    }).catch(error => {\n      console.error('Error fetching Consumption Profile names:', error);\n    });\n  },\n  data() {\n    return {\n      qrcode: '',\n      hide: false,\n      reel_number: '',\n      width: '',\n      GSM: '',\n      length: '',\n      breaks: '',\n      grade: '',\n      consumption_profile_name: 'w',\n      success: false,\n      error: false,\n      errors: [],\n      consumption_profile_names: ''\n    };\n  },\n  methods: {\n    async addSupplier() {\n      const params = {\n        \"reel_number\": this.reel_number,\n        \"width\": this.width,\n        \"gsm\": this.GSM,\n        \"length\": this.length,\n        \"breaks\": this.breaks,\n        \"grade\": this.grade,\n        \"consumption_profile_name\": this.consumption_profile_name\n      };\n      const response = await this.axios.post('/myapp/addNewReel/', {}, {\n        params: params\n      });\n      console.log(response.data); // Access response data\n      if (response.data['status'] == 'success') {\n        this.success = true;\n        this.qrcode = await qrcode__WEBPACK_IMPORTED_MODULE_5__.toDataURL(JSON.stringify(params), {\n          width: 256,\n          height: 256\n        });\n      } else {\n        this.error = true;\n        this.errors = response.data['errors'];\n      }\n    },\n    async printQRCode() {\n      const printWindow = window.open('', '_blank');\n      printWindow.document.write('<html><head><title>چاپ QR-code</title></head><body>');\n      printWindow.document.write('<img src=\"' + this.qrcode + '\" />');\n      printWindow.document.write('</body></html>');\n      printWindow.print();\n      printWindow.documents.close();\n    },\n    consumption_profile_name_clicked(name) {\n      this.consumption_profile_name = name;\n    }\n  }\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/babel-loader/lib/index.js??clonedRuleSet-40.use[0]!./node_modules/vue-loader/dist/index.js??ruleSet[0].use[0]!./src/components/addNewReel.vue?vue&type=script&lang=js\n");

/***/ })

},
/******/ function(__webpack_require__) { // webpackRuntimeModules
/******/ /* webpack/runtime/getFullHash */
/******/ !function() {
/******/ 	__webpack_require__.h = function() { return "55f4b47ad1c79af7"; }
/******/ }();
/******/ 
/******/ }
);