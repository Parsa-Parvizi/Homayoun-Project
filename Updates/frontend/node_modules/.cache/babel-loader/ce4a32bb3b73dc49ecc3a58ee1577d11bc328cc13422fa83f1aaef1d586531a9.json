{"ast":null,"code":"export default {\n  name: \"Input\",\n  props: {\n    formName: {\n      type: String,\n      required: true\n    },\n    label: {\n      type: String,\n      required: true\n    },\n    value: {\n      type: String,\n      default: ''\n    },\n    type: {\n      type: String,\n      default: 'text'\n    },\n    disabled: {\n      type: Boolean,\n      default: false\n    },\n    hidden: {\n      type: Boolean,\n      default: false\n    }\n  },\n  data() {\n    return {\n      error: false,\n      message: '',\n      inputValue: this.value\n    };\n  },\n  methods: {\n    formatNumber(value) {\n      return value.replace(/\\D/g, \"\").replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\n    },\n    updateValue(newValue) {\n      // if (this.type == 'text'){\n      //   let pattern = /^[\\u0600-\\u06FF\\s]*$/\n      //   if (pattern.test(newValue) == false){\n      //     this.error = true;\n      //     this.message = 'لطفا از حروف فارسی استفاده کنید.'\n      //   } else {\n      //     this.error = false\n      //     this.message = ''\n      //   }\n      // }\n      if (this.type == 'number') {\n        if (!Number.isInteger(parseInt(newValue))) {\n          this.error = true;\n          this.message = 'لطفا فقط از اعداد استفاده کنید.';\n        } else {\n          this.error = false;\n          this.message = '';\n        }\n        newValue = this.formatNumber(newValue);\n        this.inputValue = newValue;\n      }\n      // if (this.type == 'phone'){\n      //   let pattern =  /^((0?9)|(\\+?989))\\d{9}$/g\n      //\n      //   if (pattern.test(newValue) == false){\n      //     this.error = true;\n      //     this.message = 'فرمت شماره وارد شده صحیح نیست'\n      //   } else {\n      //     this.error = false\n      //     this.message = ''\n      //   }\n      // }\n      // if (this.type == 'comment'){\n      //   let pattern =  /^(?!.*,)[\\u0600-\\u06FF\\s]*$/;\n      //   if (pattern.test(newValue) == false){\n      //     this.error = true;\n      //     this.message = 'لطفا از حروف فارسی بدون کاما استفاده کنید.'\n      //   } else {\n      //     this.error = false\n      //     this.message = ''\n      //   }\n      // }\n      this.$emit('update', newValue);\n      this.$emit('InputError', this.error);\n    }\n  },\n  watch: {\n    value(newVal) {\n      this.inputValue = newVal;\n      // console.log(newVal, this.value, this.inputValue, this.type)\n    }\n  }\n};","map":{"version":3,"names":["name","props","formName","type","String","required","label","value","default","disabled","Boolean","hidden","data","error","message","inputValue","methods","formatNumber","replace","updateValue","newValue","Number","isInteger","parseInt","$emit","watch","newVal"],"sources":["C:\\Users\\Amir\\ISMv988\\ISMv900\\frontend\\src\\components\\custom\\Input.vue"],"sourcesContent":["<script>\r\nexport default {\r\n  name: \"Input\",\r\n  props: {\r\n    formName: {\r\n      type: String,\r\n      required: true,\r\n    },\r\n    label: {\r\n      type: String,\r\n      required: true,\r\n    },\r\n    value: {\r\n      type: String,\r\n      default: '',\r\n    },\r\n    type: {\r\n      type: String,\r\n      default: 'text',\r\n    },\r\n    disabled: {\r\n      type: Boolean,\r\n      default: false,\r\n    },\r\n    hidden:{\r\n      type: Boolean,\r\n      default: false,\r\n   },\r\n  },\r\n  data(){\r\n    return {\r\n      error: false,\r\n      message: '',\r\n      inputValue: this.value\r\n    }\r\n  },\r\n  methods: {\r\n    formatNumber(value) {\r\n      return value.replace(/\\D/g, \"\").replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\r\n    },\r\n    updateValue(newValue) {\r\n      // if (this.type == 'text'){\r\n      //   let pattern = /^[\\u0600-\\u06FF\\s]*$/\r\n      //   if (pattern.test(newValue) == false){\r\n      //     this.error = true;\r\n      //     this.message = 'لطفا از حروف فارسی استفاده کنید.'\r\n      //   } else {\r\n      //     this.error = false\r\n      //     this.message = ''\r\n      //   }\r\n      // }\r\n      if (this.type == 'number'){\r\n        if (!Number.isInteger(parseInt(newValue))){\r\n          this.error = true;\r\n          this.message = 'لطفا فقط از اعداد استفاده کنید.'\r\n        } else {\r\n          this.error = false\r\n          this.message = ''\r\n        }\r\n        newValue = this.formatNumber(newValue)\r\n        this.inputValue = newValue\r\n      }\r\n      // if (this.type == 'phone'){\r\n      //   let pattern =  /^((0?9)|(\\+?989))\\d{9}$/g\r\n      //\r\n      //   if (pattern.test(newValue) == false){\r\n      //     this.error = true;\r\n      //     this.message = 'فرمت شماره وارد شده صحیح نیست'\r\n      //   } else {\r\n      //     this.error = false\r\n      //     this.message = ''\r\n      //   }\r\n      // }\r\n      // if (this.type == 'comment'){\r\n      //   let pattern =  /^(?!.*,)[\\u0600-\\u06FF\\s]*$/;\r\n      //   if (pattern.test(newValue) == false){\r\n      //     this.error = true;\r\n      //     this.message = 'لطفا از حروف فارسی بدون کاما استفاده کنید.'\r\n      //   } else {\r\n      //     this.error = false\r\n      //     this.message = ''\r\n      //   }\r\n      // }\r\n      this.$emit('update', newValue);\r\n      this.$emit('InputError', this.error);\r\n    },\r\n  },\r\n  watch: {\r\n     value(newVal) {\r\n        this.inputValue = newVal;\r\n        // console.log(newVal, this.value, this.inputValue, this.type)\r\n     }\r\n  }\r\n};\r\n</script>\r\n\r\n<template>\r\n <div class=\"relative\" :class=\"[hidden ? 'hidden':'']\">\r\n    <input\r\n      v-model=\"inputValue\"\r\n      @input=\"updateValue($event.target.value)\"\r\n      type=\"text\"\r\n      :id=\"formName\"\r\n      :disabled=\"disabled\"\r\n      :class=\"[\r\n        error ? 'text-red-900 border-red-500 focus:border-red-500' : 'text-gray-900 focus:border-green-500 border-gray-300'\r\n      ]\"\r\n      class=\"block px-2.5 pb-2.5 pt-4 w-full text-sm bg-transparent rounded-lg border-1 appearance-none focus:outline-none focus:ring-0 peer\"\r\n      placeholder=\"\"\r\n    />\r\n    <label\r\n      :for=\"formName\"\r\n      :class=\"[\r\n        error ? 'peer-focus:text-red-500 text-red-500' : 'peer-focus:text-green-500 text-gray-500'\r\n      ]\"\r\n      class=\"absolute text-sm dark:text-gray-400 duration-300 transform -translate-y-4 scale-75 top-2 z-10 origin-[0] bg-white dark:bg-gray-900 px-2 peer-focus:px-2 peer-focus:dark:text-blue-500 peer-placeholder-shown:scale-100 peer-placeholder-shown:-translate-y-1/2 peer-placeholder-shown:top-1/2 peer-focus:top-2 peer-focus:scale-75 peer-focus:-translate-y-4 rtl:peer-focus:translate-x-1/4 rtl:peer-focus:left-auto start-1\"\r\n    >\r\n      {{ label }}\r\n    </label>\r\n    <p v-if=\"error\" class=\"mt-2 text-xs text-red-600 dark:text-red-400\">{{message}}</p>\r\n </div>\r\n</template>\r\n"],"mappings":"AACA,eAAe;EACbA,IAAI,EAAE,OAAO;EACbC,KAAK,EAAE;IACLC,QAAQ,EAAE;MACRC,IAAI,EAAEC,MAAM;MACZC,QAAQ,EAAE;IACZ,CAAC;IACDC,KAAK,EAAE;MACLH,IAAI,EAAEC,MAAM;MACZC,QAAQ,EAAE;IACZ,CAAC;IACDE,KAAK,EAAE;MACLJ,IAAI,EAAEC,MAAM;MACZI,OAAO,EAAE;IACX,CAAC;IACDL,IAAI,EAAE;MACJA,IAAI,EAAEC,MAAM;MACZI,OAAO,EAAE;IACX,CAAC;IACDC,QAAQ,EAAE;MACRN,IAAI,EAAEO,OAAO;MACbF,OAAO,EAAE;IACX,CAAC;IACDG,MAAM,EAAC;MACLR,IAAI,EAAEO,OAAO;MACbF,OAAO,EAAE;IACZ;EACD,CAAC;EACDI,IAAIA,CAAA,EAAE;IACJ,OAAO;MACLC,KAAK,EAAE,KAAK;MACZC,OAAO,EAAE,EAAE;MACXC,UAAU,EAAE,IAAI,CAACR;IACnB;EACF,CAAC;EACDS,OAAO,EAAE;IACPC,YAAYA,CAACV,KAAK,EAAE;MAClB,OAAOA,KAAK,CAACW,OAAO,CAAC,KAAK,EAAE,EAAE,CAAC,CAACA,OAAO,CAAC,uBAAuB,EAAE,GAAG,CAAC;IACvE,CAAC;IACDC,WAAWA,CAACC,QAAQ,EAAE;MACpB;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA,IAAI,IAAI,CAACjB,IAAG,IAAK,QAAQ,EAAC;QACxB,IAAI,CAACkB,MAAM,CAACC,SAAS,CAACC,QAAQ,CAACH,QAAQ,CAAC,CAAC,EAAC;UACxC,IAAI,CAACP,KAAI,GAAI,IAAI;UACjB,IAAI,CAACC,OAAM,GAAI,iCAAgC;QACjD,OAAO;UACL,IAAI,CAACD,KAAI,GAAI,KAAI;UACjB,IAAI,CAACC,OAAM,GAAI,EAAC;QAClB;QACAM,QAAO,GAAI,IAAI,CAACH,YAAY,CAACG,QAAQ;QACrC,IAAI,CAACL,UAAS,GAAIK,QAAO;MAC3B;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA,IAAI,CAACI,KAAK,CAAC,QAAQ,EAAEJ,QAAQ,CAAC;MAC9B,IAAI,CAACI,KAAK,CAAC,YAAY,EAAE,IAAI,CAACX,KAAK,CAAC;IACtC;EACF,CAAC;EACDY,KAAK,EAAE;IACJlB,KAAKA,CAACmB,MAAM,EAAE;MACX,IAAI,CAACX,UAAS,GAAIW,MAAM;MACxB;IACH;EACH;AACF,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}