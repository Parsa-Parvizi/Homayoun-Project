{"ast":null,"code":"export function parseLicenseNumber(licenseNumber) {\n  // Assuming the pattern is consistent\n  const first = licenseNumber.slice(0, 2);\n  const letter = licenseNumber.slice(2, 3);\n  const second = licenseNumber.slice(3, 6);\n  const year = licenseNumber.slice(-2);\n\n  // Create an object with the parsed values\n  return {\n    first: first,\n    letter: letter,\n    second: second,\n    country: 'ایران',\n    year: year\n  };\n}\nexport function LicenseNumberParser(licenseNumber) {\n  // Define a regex pattern to match the parts of the license number, including line breaks\n  const regex1 = /^(\\d{2})(\\w)(\\d{3})(\\w{5})(\\d{2})$/;\n  const regex = /^(\\d{2})*$/;\n  const matches = licenseNumber.match(regex);\n  console.log(licenseNumber, matches);\n  if (matches) {\n    console.log(matches);\n    // Extract the matched groups\n    const first = matches[1];\n    const letter = matches[2];\n    const second = matches[3];\n    const year = matches[5];\n\n    // Create an object with the parsed values\n    return {\n      first: first,\n      letter: letter,\n      second: second,\n      country: 'ایران',\n      year: year\n    };\n  }\n}","map":{"version":3,"names":["parseLicenseNumber","licenseNumber","first","slice","letter","second","year","country","LicenseNumberParser","regex1","regex","matches","match","console","log"],"sources":["C:/Users/Amir/ISMv988/ISMv900/frontend/src/components/lic_num_split.js"],"sourcesContent":["export function parseLicenseNumber(licenseNumber) {\r\n    // Assuming the pattern is consistent\r\n    const first = licenseNumber.slice(0, 2);\r\n    const letter = licenseNumber.slice(2, 3);\r\n    const second = licenseNumber.slice(3, 6);\r\n    const year = licenseNumber.slice(-2);\r\n\r\n    // Create an object with the parsed values\r\n    return {\r\n        first: first,\r\n        letter: letter,\r\n        second: second,\r\n        country: 'ایران',\r\n        year: year\r\n    };\r\n}\r\nexport function LicenseNumberParser(licenseNumber) {\r\n    // Define a regex pattern to match the parts of the license number, including line breaks\r\n    const regex1 = /^(\\d{2})(\\w)(\\d{3})(\\w{5})(\\d{2})$/;\r\n    const regex = /^(\\d{2})*$/;\r\n    const matches = licenseNumber.match(regex);\r\n    console.log(licenseNumber, matches)\r\n    if (matches) {\r\n        console.log(matches)\r\n        // Extract the matched groups\r\n        const first = matches[1];\r\n        const letter = matches[2];\r\n        const second = matches[3];\r\n        const year = matches[5];\r\n\r\n        // Create an object with the parsed values\r\n        return {\r\n            first: first,\r\n            letter: letter,\r\n            second: second,\r\n            country: 'ایران',\r\n            year: year\r\n        }\r\n    }\r\n}\r\n"],"mappings":"AAAA,OAAO,SAASA,kBAAkBA,CAACC,aAAa,EAAE;EAC9C;EACA,MAAMC,KAAK,GAAGD,aAAa,CAACE,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC;EACvC,MAAMC,MAAM,GAAGH,aAAa,CAACE,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC;EACxC,MAAME,MAAM,GAAGJ,aAAa,CAACE,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC;EACxC,MAAMG,IAAI,GAAGL,aAAa,CAACE,KAAK,CAAC,CAAC,CAAC,CAAC;;EAEpC;EACA,OAAO;IACHD,KAAK,EAAEA,KAAK;IACZE,MAAM,EAAEA,MAAM;IACdC,MAAM,EAAEA,MAAM;IACdE,OAAO,EAAE,OAAO;IAChBD,IAAI,EAAEA;EACV,CAAC;AACL;AACA,OAAO,SAASE,mBAAmBA,CAACP,aAAa,EAAE;EAC/C;EACA,MAAMQ,MAAM,GAAG,oCAAoC;EACnD,MAAMC,KAAK,GAAG,YAAY;EAC1B,MAAMC,OAAO,GAAGV,aAAa,CAACW,KAAK,CAACF,KAAK,CAAC;EAC1CG,OAAO,CAACC,GAAG,CAACb,aAAa,EAAEU,OAAO,CAAC;EACnC,IAAIA,OAAO,EAAE;IACTE,OAAO,CAACC,GAAG,CAACH,OAAO,CAAC;IACpB;IACA,MAAMT,KAAK,GAAGS,OAAO,CAAC,CAAC,CAAC;IACxB,MAAMP,MAAM,GAAGO,OAAO,CAAC,CAAC,CAAC;IACzB,MAAMN,MAAM,GAAGM,OAAO,CAAC,CAAC,CAAC;IACzB,MAAML,IAAI,GAAGK,OAAO,CAAC,CAAC,CAAC;;IAEvB;IACA,OAAO;MACHT,KAAK,EAAEA,KAAK;MACZE,MAAM,EAAEA,MAAM;MACdC,MAAM,EAAEA,MAAM;MACdE,OAAO,EAAE,OAAO;MAChBD,IAAI,EAAEA;IACV,CAAC;EACL;AACJ"},"metadata":{},"sourceType":"module","externalDependencies":[]}